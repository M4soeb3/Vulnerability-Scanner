import requests
from bs4 import BeautifulSoup

# Base URL of the application
BASE_URL = "http://localhost:3000"

# Helper function to send requests
def send_request(url, method='get', data=None):
    try:
        if method == 'post':
            return requests.post(url, data=data)
        else:
            return requests.get(url, params=data)
    except requests.RequestException as e:
        print(f"Error making request to {url}: {str(e)}")
        return None

# Detailed Vulnerability Report Function
def report_vulnerability(details):
    print("\nVulnerability Found:")
    for key, value in details.items():
        print(f"{key.capitalize()}: {value}")

# SQL Injection Module
def test_sql_injection(paths):
    payloads = ["' OR '1'='1", "' OR 1=1--", "' OR 'x'='x"]
    for path in paths:
        for payload in payloads:
            response = send_request(f"{BASE_URL}{path}", data={'username': 'admin', 'password': payload})
            if response and "error" not in response.text:
                details = {
                    "type": "SQL Injection",
                    "url": f"{BASE_URL}{path}",
                    "parameter": "password",
                    "payload": payload,
                    "evidence": response.text[:100],
                    "severity": "High",
                    "confidence": "High",
                    "description": "The application may be vulnerable to SQL injection.",
                    "remediation": "Use parameterized queries or prepared statements."
                }
                report_vulnerability(details)

# XSS Module
def test_xss(paths):
    payload = "<script>alert('XSS')</script>"
    for path in paths:
        response = send_request(f"{BASE_URL}{path}", data={'input': payload})
        if payload in response.text:
            details = {
                "type": "Cross-Site Scripting (XSS)",
                "url": f"{BASE_URL}{path}",
                "parameter": "input",
                "payload": payload,
                "evidence": "Payload reflected in response.",
                "severity": "High",
                "confidence": "Medium",
                "description": "Reflected XSS vulnerability detected.",
                "remediation": "Sanitize all user inputs and implement Content Security Policy (CSP)."
            }
            report_vulnerability(details)

# CSRF Module
def test_csrf(paths):
    for path in paths:
        response = send_request(f"{BASE_URL}{path}")
        if response:
            soup = BeautifulSoup(response.text, 'html.parser')
            forms = soup.find_all('form')
            for form in forms:
                if not form.find('input', {'name': 'csrf_token'}):
                    details = {
                        "type": "Cross-Site Request Forgery (CSRF)",
                        "url": f"{BASE_URL}{path}",
                        "evidence": "Form without CSRF token found.",
                        "severity": "Medium",
                        "confidence": "High",
                        "description": "Forms are missing CSRF protection tokens.",
                        "remediation": "Implement CSRF tokens in all forms."
                    }
                    report_vulnerability(details)

# Unvalidated Redirects and Forwards
def test_unvalidated_redirects_and_forwards(paths):
    payload = "http://malicious.com"
    for path in paths:
        response = send_request(f"{BASE_URL}{path}", data={'url': payload})
        if response and payload in response.url:
            details = {
                "type": "Unvalidated Redirects and Forwards",
                "url": f"{BASE_URL}{path}",
                "parameter": "url",
                "payload": payload,
                "evidence": "Redirect to user-supplied URL without validation.",
                "severity": "Medium",
                "confidence": "High",
                "description": "The application may redirect users to an attacker-specified destination.",
                "remediation": "Implement server-side validation of all redirect and forward requests."
            }
            report_vulnerability(details)

# Security Misconfiguration
def test_security_misconfiguration():
    paths = ["/.git/", "/config/", "/db/", "/admin/", "/api/"]
    for path in paths:
        response = send_request(f"{BASE_URL}{path}")
        if response and response.status_code != 404:
            details = {
                "type": "Security Misconfiguration",
                "url": f"{BASE_URL}{path}",
                "evidence": f"Accessible sensitive path: {path}",
                "severity": "High",
                "confidence": "Medium",
                "description": "Sensitive directories or files are accessible to the public.",
                "remediation": "Configure proper access controls, and hide or remove any sensitive files from public access."
            }
            report_vulnerability(details)

# Sensitive Data Exposure
def test_sensitive_data_exposure():
    paths = ["/users", "/config", "/api"]
    keywords = ["password", "apikey", "secret", "token"]
    for path in paths:
        response = send_request(f"{BASE_URL}{path}")
        if response:
            for keyword in keywords:
                if keyword in response.text.lower():
                    details = {
                        "type": "Sensitive Data Exposure",
                        "url": f"{BASE_URL}{path}",
                        "evidence": f"Detected sensitive keyword '{keyword}' in response.",
                        "severity": "Critical",
                        "confidence": "High",
                        "description": "Sensitive information such as credentials and API keys are exposed in the application.",
                        "remediation": "Encrypt sensitive data at rest and in transit, and minimize exposure to the user."
                    }
                    report_vulnerability(details)

# Main function to run all tests
def main():
    test_paths = ["/login", "/search", "/submit", "/redirect"]
    print("Starting SQL Injection Tests...")
    test_sql_injection(test_paths)
    print("Starting XSS Tests...")
    test_xss(test_paths)
    print("Starting CSRF Tests...")
    test_csrf(test_paths)
    print("Starting Unvalidated Redirects and Forwards Tests...")
    test_unvalidated_redirects_and_forwards(test_paths)
    print("Checking for Security Misconfigurations...")
    test_security_misconfiguration()
    print("Checking for Sensitive Data Exposures...")
    test_sensitive_data_exposure()

if __name__ == "__main__":
    main()

